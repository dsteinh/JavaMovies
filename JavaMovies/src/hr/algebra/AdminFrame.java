/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.parsers.rss.MovieParser;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.MessageUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.stream.XMLStreamException;

/**
 *
 * @author Dodo
 */
public class AdminFrame extends javax.swing.JFrame {

    private Repository repository;
    private List<Movie> movieList = new LinkedList();

    /**
     * Creates new form AdminFrame
     */
    public AdminFrame() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDeleteAll = new javax.swing.JButton();
        btnFillDatabase = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnDeleteAll.setBackground(new java.awt.Color(255, 51, 0));
        btnDeleteAll.setText("Delete All Data");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnFillDatabase.setText("Fill Database");
        btnFillDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillDatabaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnFillDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFillDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFillDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillDatabaseActionPerformed
        try {
            if (!movieList.isEmpty()) {
                MessageUtils.showInformationMessage("Info", "Data already in database");
                return;
            }
            movieList = MovieParser.parse();
            Set<Movie> movieSet = new HashSet(movieList);
            Set<Person> directors = getDirectors(movieSet);
            repository.createDirectors(directors);
            repository.createMovies(movieSet);
            Set<Person> actors = getActors(movieSet);
            repository.createActors(actors);
            repository.createMoviActors(movieSet);
            MessageUtils.showInformationMessage("Info", "Data uploaded");

        } catch (IOException | XMLStreamException ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFillDatabaseActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        int res = MessageUtils.showConfirmDialog("Confirm", "Do you really want to delete all data?");
        if (res == JOptionPane.YES_OPTION) {
            try {
                DeleteImgs(movieList);
                repository.deleteAllData();
                movieList.clear();
                MessageUtils.showInformationMessage("Info", "Data deleted successfully");
            } catch (Exception ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnDeleteAllActionPerformed
    private void init() {
        try {
            repository = RepositoryFactory.getRepository();

        } catch (Exception ex) {
            Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnFillDatabase;
    private javax.swing.JLabel lblMessage;
    // End of variables declaration//GEN-END:variables

    private HashSet<Person> getDirectors(Set<Movie> movies) {
        HashSet<Person> directors = new HashSet();
        movies.forEach((mov) -> {
            directors.add(mov.getDirector());
        });
        return directors;
    }

    private Set<Person> getActors(Set<Movie> movies) {
        HashSet<Person> actors = new HashSet();

        for (Movie mov : movies) {

            List<Person> a = mov.getActors();
            if (a == null) {
                continue;
            }
            for (Person person : a) {
                actors.add(person);
            }

        }

        return actors;
    }

    private void DeleteImgs(List<Movie> movies) {

        deleteList(movieList);
        deleteList(movies);
    }

    private void deleteList(List<Movie> list) {
        list.forEach(m -> {
            try {
                FileUtils.deleteFile(m.getImagePath());
            } catch (IOException ex) {
                Logger.getLogger(AdminFrame.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "An error occurred while deleting on this path: " + m.getImagePath());
            }
        });
    }

    
}
